// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid()) @map("_id") 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Character {	
    id        String @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String
    AvatarURL String
    race     String
    level    Int
    class    String
    alignment String
    age     Int
    height     Float
    weight     Int
    eyes     String
    skin     String
    hair     String
    background     String

    Atuallife      Int
    temporarylife      Int
    maxlife      Int
    temporaryLife Int

    mana      Int
    displacement Int
    ac      Int
    initiative     Int
    cdToAvoidMagic    Int
    modAtackMagic    Int
    spellcastingAttribute     String
    spells    SpellsOnCharacter[] 
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String 
}

model SpellsOnCharacter {
    id        String   @id @default(cuid()) @map("_id") 
    characterId String
    spellId String
    character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    spell Spells @relation(fields: [spellId], references: [id], onDelete: Cascade)
}

model Spells {
    id        String   @id @default(cuid()) @map("_id") 
    SpellName      String
    Concentration Boolean
    Description String
    Duration String
    Level Int
    Material String
    Reach String
    Ritual Boolean
    School String
    Time String
    Classes String[]
    Somatic Boolean
    Verbal Boolean
    characters SpellsOnCharacter[]
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    characters    Character[]
}

model VerificationToken {
    id            String    @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
